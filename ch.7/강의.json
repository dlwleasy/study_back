
1. json
javascript 객체문법으로 구조화된 데이터교환형식
여러언어에서 데이터 교환형식으로 쓰여 객체문법말고도 단순배열, 문자열도 표현가능 

2.데이터 + 교환형식
데이터? 추상적인 아이디어에서부터 구체적인 측정 등등 다양한 의미
실험,조사,관찰 등으로부터 얻은 사실이나 자료 

이러한 데이터를 기업사이에서 전달받을때 어떠한 "형식"을 써야될지 논의가 나옴


3. 여러언어에서의 쓰임 
객체, 해시테이블,딕셔너리등으로 변환되어서 잘 쓰인다. 

스키마 구출 잘 하기

:: 타입지정 잘 하기 -> type checking / logic 추가필요
   
-> data의 type을 맞춰주는것이 중요하다

name : String
song : String 이런식으로 맞춰주기 


data표현 

{
"name" : "minkyeong",
"like" :  ["coding","exercise"]  // 배열형식 사용 
"coding" : "computerscience subject",
"exercise" : "weight"
}

{
"name" : "minkyeong",
"like" : { "coding" : "computerscience subject" ,
           "exercise" : "weight" }

}

{
"name" : "minkyeong",
"like" : { "coding" : {
"what" :  "computerscience subject" ,
"which" : "java"}

           "exercise" : {
"what" : "weight"
"which" : "idontknow" //속성까지 알 수 있음 
 }
}

{
"name" : "minkyeong",
"like" : { "coding" : {
"what" :  "computerscience subject" ,
"which" : "java"} -> 여기에서 이 코딩게 관한것으로 객체도 만들 수 있기에  다른형식으로 작성가능 (배열)

           "exercise" : {
"what" : "weight"
"which" : "idontknow" //속성까지 알 수 있음 
 }
}

{
"name" : "minkyeong",
"like" : { "coding" : {
"what" :  "computerscience subject" ,
"which" : "java"} -> 여기에서 이 코딩게 관한것으로 객체도 만들 수 있기에  다른형식으로 작성가능 (배열)

배열로 만든다면 ? 

"like" : [ 
"name" : "coding",
"what" : "conputerscience subject"
"which" : "java"

]

그냥 이런식으로 데이터를 json타입으로 표현이 가능하다라는 것임.


4.JSON의 타입
javascript object와 유사하지만,  **undefined,메서드** 등을 포함하지 않습니다.

const a = {
 "a" : () => { console.log(1)},
"b" : undefined  
}
console.log(a);

-> 자바스크립트와 엄연히 다른것이다.

들어갈 수 있는 데이터 타입은 > 객체, 배열, 문자열, 수, 참/거짓, null 


5. JSON 직렬화, 역직렬화 

직렬화 : 외부의 시스템에서도 사용할 수 있도록 바이트 형태로 데이터를 변환하는 기술
역직렬화는 위의 반대를 의미

js -> js object로 변환해서 사용해야됨
py -> dictionary로 변환해서 사용해야됨 

js->py  : 넘길리면 다시 json으로 다시 바궈준다음에 dict으로 바꿀 수 있음
--> 이런식으로 외부에서도 접근할 수 있게해주는 것을 직렬화라고 한다.

JSON.parse() ㅣ object로 변환할때 사용 
JSON.stringify() | 문자열로 데이터 변환시킴 

그렇다면 기존의 json의 형태를 직렬화된 상태라고 볼 수 있는건가? 왜냐하면 역직렬화는 객체로 변환시킨거고 
직렬환는 역직렬화 되기전, 기존의 상태로 되돌리기 위한것이니까?
-> 맞다 , json 자체는 직렬화된 데이터 형태(문자열)이다. 
- 객체로 변환하는 과정이 역직렬화/

const b = JSON.parse(a) //역직렬화
console.log(b)
const c= JSON.stringify(b)//직렬화 
console.log(c)

6. JSON의 활용

JSON은 프로그래밍언어와 프레임워크 등에 독립적이므로, 
**서로 다른 시스템간에 데이터를 교환**하기에 좋다.

주로 API의 반환형태, 시스템을 구성하는 설정파일에 활용!!! 
EX) 업비트의 api , package json 
